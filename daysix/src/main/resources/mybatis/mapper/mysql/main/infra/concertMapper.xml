<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.seon.infra.concert.ConcertDao">
<!-- namespace :  mapper와 연결될 dao -->
<!-- xml에서 주석 단축키 : Ctrl + Shift + C -->

	<resultMap type="com.seon.infra.concert.ConcertDto" id="resultMapObj"></resultMap>
	
	<insert id="insertReply">
		INSERT INTO reply (
			replyText
			,replyDateTime
			,member_mmSeq
			,concert_concertSeq
		)
		VALUES (
			#{replyText}
			,now()
			,#{member_mmSeq}
			,#{concert_concertSeq}
		)
	</insert>
	
	<insert id="insertScore">
		INSERT INTO concertScore (
			csStar
			,concert_concertSeq
		)
		VALUES (
			#{csStar}
			,#{concert_concertSeq}
		)
		<selectKey resultType="String" keyProperty="csSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<update id="updateScore">
		UPDATE concertScore AS a
			SET
				a.csStar = #{csStar}
			WHERE 1 = 1
				AND a.csSeq = #{csSeq}
	</update>
	
	<select id="selectListReply" resultMap="resultMapObj">
		SELECT
			a.replySeq
			,a.replyText
		    ,a.replyDateTime
		    ,a.member_mmSeq
		    ,a.concert_concertSeq
		    ,b.concertSeq
		    ,b.concertName
		    ,c.mmName
		FROM reply a
			LEFT JOIN concert AS b ON b.concertSeq = a.concert_concertSeq
			LEFT JOIN member AS c ON c.mmSeq = a.member_mmSeq
		WHERE 1 = 1
			AND a.concert_concertSeq = #{concertSeq}
		ORDER BY
			a.replySeq DESC
	</select>
	
	<select id="selectOneCountReply" resultType="Integer">
		SELECT COUNT(*)
			FROM reply AS a
		WHERE 1 = 1
			AND a.concert_concertSeq = #{concertSeq}
	</select>
	
	<select id="selectList" resultMap="resultMapObj">
		SELECT aa.* FROM (
			SELECT
				a.concertSeq
				,a.concertName
				,a.concertPlayTime
				,a.concertDate
				,a.concertSinger
				,a.concertAge
				,a.concertGenre
				,a.concertDesc
				,a.concertDateTimeReg
				,a.concertDateTimeEdit
				,a.concertUseNy
				,a.concertDelNy
				,c.hallName
				,(SELECT COUNT(replySeq) FROM reply AS b WHERE 1 = 1 AND b.concert_concertSeq = a.concertSeq) AS replyCount
				,(SELECT AVG(csStar) FROM concertScore AS c WHERE 1 = 1 AND c.concert_concertSeq = a.concertSeq) AS starAvg
				,e.path
				,(SELECT COUNT(csSeq) FROM concertScore AS d WHERE 1 = 1 AND d.concert_concertSeq = a.concertSeq) AS starVote
			FROM concert AS a
			LEFT JOIN concertHallConcert AS b ON b.concert_concertSeq = a.concertSeq
			LEFT JOIN concertHall AS c ON c.hallSeq = b.concertHall_hallSeq
			LEFT JOIN concertPhoto AS e ON e.pseq = a.concertSeq
			WHERE 1 = 1
				<if test="shDelNy != null and !shDelNy.equals('')">AND concertDelNy = #{shDelNy}</if>
				<if test="shUseNy != null and !shUseNy.equals('')">AND concertUseNy = #{shUseNy}</if>
				<choose>
					<when test="shOption == 1">AND concertSeq = #{shOption}</when>
					<when test="shOption == 2">AND concertName LIKE CONCAT('%', #{shValue}, '%')</when>
				</choose>
				<choose>
					<when test="shOptionDate == 1">AND a.concertDateTimeReg BETWEEN #{shDateStart} AND #{shDateEnd}</when>
					<when test="shOptionDate == 2">AND a.concertDateTimeEdit BETWEEN #{shDateStart} AND #{shDateEnd}</when>
				</choose>
			ORDER BY
				a.concertSeq DESC
		) aa
		limit #{rowNumToShow} offset #{startRnumForMysql}
	</select>
	
	<insert id="insert">
		INSERT INTO concert (
			concertName
			,concertPlayTime
			,concertDate
			,concertSinger
			,concertAge
			,concertGenre
			,concertDesc
			,concertDateTimeReg
			,concertDateTimeEdit
			,concertUseNy
			,concertDelNy
		)
		VALUES (
			#{concertName}
			,#{concertPlayTime}
			,#{concertDate}
			,#{concertSinger}
			,#{concertAge}
			,#{concertGenre}
			,#{concertDesc}
			,now()
			,now()
			,1
			,0
		)
		<selectKey resultType="String" keyProperty="concertSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<insert id="insertUploaded">
		INSERT INTO concertPhoto (
			type
			,defaultNy
			,sort
			,path
			,tableName
			,originalName
			,uuidName
			,ext
			,size
		)
		VALUES (
			#{type}
			,#{defaultNy}
			,#{sort}
			,#{path}
			,#{tableName}
			,#{originalName}
			,#{uuidName}
			,#{ext}
			,#{size}
		)
		<selectKey resultType="String" keyProperty="pseq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<select id="selectOne" resultMap="resultMapObj">
		SELECT
			a.concertSeq
			,a.concertName
			,a.concertPlayTime
			,a.concertDate
			,a.concertSinger
			,a.concertAge
			,a.concertGenre
			,a.concertDesc
			,a.concertDateTimeReg
			,a.concertDateTimeEdit
			,a.concertUseNy
			,a.concertDelNy
			,c.hallName
			,c.hallWi
			,c.hallGy
		FROM concert AS a
		LEFT JOIN concertHallConcert AS b ON b.concert_concertSeq = a.concertSeq
		LEFT JOIN concertHall AS c ON c.hallSeq = b.concertHall_hallSeq
		WHERE 1 = 1
			AND a.concertSeq = #{concertSeq}
	</select>
	
	<select id="selectOneAvg">
		SELECT AVG(a.csStar)
			FROM concertScore AS a
			LEFT JOIN concert AS b ON b.concertSeq = a.concert_concertSeq
		WHERE 1 = 1
			AND a.concert_concertSeq = #{concertSeq}
	</select>
	
	<select id="selectOneImg">
		SELECT
			a.path
		FROM concertPhoto AS a
		LEFT JOIN concert AS b ON b.concertSeq = a.pseq
		WHERE 1 = 1
			AND a.pseq = #{concertSeq}
	</select>
	
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
			FROM concert AS a
	</select>
	
	<update id="update">
		UPDATE concert
			SET
				concertName = #{concertName}
				,concertPlayTime = #{concertPlayTime}
				,concertDate = #{concertDate}
				,concertSinger = #{concertSinger}
				,concertAge = #{concertAge}
				,concertGenre = #{concertGenre}
				,concertDesc = #{concertDesc}
				,concertDateTimeReg = now()
				,concertDateTimeEdit = now()
				,concertUseNy = #{concertUseNy}
			WHERE 1 = 1
				AND concertSeq = #{concertSeq}
	</update>
	
	<update id="uelete">
		UPDATE concert
			SET
				ConcertDelNy = 1
			WHERE 1 = 1
				AND concertSeq = #{concertSeq}
	</update>
	
	<delete id="delete">
		DELETE FROM concert
			WHERE 1 = 1
				AND concertSeq = #{concertSeq}
	</delete>
	
</mapper>